#!/bin/bash
#
#	 Copyright (C) 2022-2024 Skeletonek
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
#    Contact: contact@skeletonek.com

arg_help=0;
arg_snapper=0;
arg_reboot=0;
arg_version=0;

while getopts brhv arg
do
    case "${arg}" in
        b) arg_snapper=1;;
        r) arg_reboot=1;;
        v) arg_version=1;;
        h) arg_help=1;;
        *) arg_help=1;;
    esac
done


if [[ $arg_help = 1 ]] ; then
    cat << EOF
The script need to be run as root.

Script to update your system automaticly.
After update, this script will shutdown your PC or restart it if you used -r parameter.

Syntax: ssu [-b/-h/-r/-v]
Options:
-b    Create a filesystem snapshot with snapper (Requires snapper to be installed)
-h    Shows this help
-r    Restarts system after update
-v    Shows version info

Examples:
ssu -br
ssu -h
EOF
    exit 0
fi


if [[ $arg_version = 1 ]] ; then
    cat << EOF
Simple System Update
Version: 1.2.1
Author: Skeletonek

Copyright (C) 2022-2024 Skeletonek
Licensed under GNU GPLv3
EOF
    exit 0
fi

if ! [ $(id -u) = 0 ]; then
   echo "The script need to be run as root." >&2
   exit 1
fi



#    Creating pre-snapshot
if [[ $arg_snapper = 1 ]] ; then
    type snapper &>/dev/null && pre=$(snapper create -d "ssu update" -t pre -p)
fi

#    Updating system
type flatpak &>/dev/null && sudo -u \#1000 flatpak update -y; #FIXME: Not a greatest solution for multi-user systems
type snap &>/dev/null && snap update -y;
type apt &>/dev/null && apt update && apt upgrade -y;
# Prioritize DNF5 over DNF4
if [[ $(type dnf5) != 0 ]]; then
    dnf5 update -y;
else
    type dnf &>/dev/null && dnf update -y;
fi
type pacman &>/dev/null && pacman -Syu;
type rpm-ostree &>/dev/null && rpm-ostree update 
if [[ $(type zypper &>/dev/null ) != 0 ]]; then
    if [[ $(zypper tos) == *"Tumbleweed"* ]]; then
        zypper dup -y;
    else
        zypper up -y;
    fi
fi

#    Creating post-snaphost
if [[ $arg_snapper = 1 ]] ; then
    type snapper &>/dev/null && snapper create -d "ssu update" -t post --pre-number $pre
fi

#    Turning off system
if [[ $arg_reboot = 1 ]] ; then
    dbus-send --system --print-reply --dest=org.freedesktop.login1 /org/freedesktop/login1 "org.freedesktop.login1.Manager.Reboot" boolean:true
else
    dbus-send --system --print-reply --dest=org.freedesktop.login1 /org/freedesktop/login1 "org.freedesktop.login1.Manager.PowerOff" boolean:true
fi

# These somehow don't work when run from this script
# But executing them from a terminal works just fine
# Leaving them here for supposed future use with KDE desktop

# qdbus org.kde.Shutdown /Shutdown org.kde.Shutdown.logoutAndReboot
# qdbus org.kde.Shutdown /Shutdown org.kde.Shutdown.logoutAndShutdown
